[build-system]
requires = ["maturin>=1.0"]
build-backend = "maturin"

[project]
name = "ark-resolver"
version = "0.1.0"
description = "ARK Resolver implemented in Python and Rust"
readme = "README.md"
requires-python = ">=3.12"
license = "Apache-2.0"

dependencies = [
    "sanic",
    "Sanic-Cors",
    "Sanic-Plugins-Framework",
    "sanic-routing",
    "aiofiles",
    "anyio",
    "certifi",
    "chardet",
    "charset-normalizer",
    "h11",
    "html5tagger",
    "httpcore",
    "httptools",
    "httpx",
    "idna",
    "maturin",
    "multidict",
    "opentelemetry-api",
    "opentelemetry-sdk",
    "requests",
    "rfc3986",
    "sentry-sdk[opentelemetry]",
    "sniffio",
    "toml",
    "tracerite",
    "types-requests",
    "types-urllib3",
    "typing_extensions",
    "urllib3",
    "uvloop",
    "websockets",
]
[dependency-groups]
dev = ["maturin", "pytest", "mypy", "pre-commit", "ruff>=0.11.2"]

[tool.maturin]
bindings = "pyo3"
module-name = "ark_resolver._rust"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "--verbose -s"
pythonpath = ["."]

[tool.mypy]
strict = true

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "RUF",   # ruff-specific rules
    "PL",    # pylint
    "I",     # isort
    "E",     # pycodestyle errors
    "F",     # pyflakes
    "A",     # flake8-builtins
    "BLE",   # flake8-blind-except
    "ARG",   # flake8-unused-arguments
    "S",     # flake8-bandit plugin which checks for security issues
    "YTT",   # flake8-2020 plugin, which checks for misuse of `sys.version` or `sys.version_info`
    "ASYNC", # flake8-async plugin, which checks for bad async / asyncio practices
    "ISC",   # flake8-implicit-str-concat plugin, which checks for problematic string concatenation
    "INP",   # flake8-no-pep420 plugin, which checks for missing __init__.py files
    "PIE",   # flake8-pie plugin, which does miscellaneous checks
    "PT",    # flake8-pytest-style plugin
    "TID",   # flake8-tidy-imports plugin
    "ICN",   # flake8-import-conventions plugin, which checks for import conventions
    "ARG",   # flake8-unused-arguments
    "PGH",   # pygrep-hooks: A collection of fast, cheap, regex based pre-commit hooks
    "UP031", # pyupgrade: printf-string-formatting
    "D101",  # pydocstyle: undocumented-public-class
    "D102",  # pydocstyle: undocumented-public-method
    "D103",  # pydocstyle: undocumented-public-function
    "D417",  # pydocstyle: undocumented-param
    "B023",  # flake8-bugbear: function-uses-loop-variable
    "FIX",   # flake8-fixme: checks for FIXME, TODO, XXX, etc.
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
force-single-line = true
